<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
  <key>fileTypes</key>
  <array>
    <string>pgsql</string>
    <string>psql</string>
  </array>
  <key>foldingStartMarker</key>
  <string>\s*\(\s*$</string>
  <key>foldingStopMarker</key>
  <string>^\s*\)</string>
  <key>name</key>
  <string>SQL (PostgreSQL)</string>
  <key>patterns</key>
  <array>
    <dict>
      <key>include</key>
      <string>#comments</string>
    </dict>
    <dict>
      <key>begin</key>
      <string>(?i)^\s*(create)\s+(or\s+replace\s+)?(function|procedure|view)\s+((?:(?:[\w]+|".+")\.)?(?:[\w]+|".+"))</string>
      <key>beginCaptures</key>
      <dict>
        <key>1</key>
        <dict>
          <key>name</key>
          <string>keyword.other.create.pgsql</string>
        </dict>
        <key>2</key>
        <dict>
          <key>name</key>
          <string>keyword.other.pgsql</string>
        </dict>
        <key>3</key>
        <dict>
          <key>name</key>
          <string>keyword.other.pgsql</string>
        </dict>
        <key>4</key>
        <dict>
          <key>name</key>
          <string>entity.name.function.pgsql</string>
        </dict>
      </dict>
      <key>end</key>
      <string>;\s*</string>
      <key>name</key>
      <string>meta.statement.pgsql.create</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>include</key>
          <string>#dollar_quotes</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#comments</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#strings</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#keywords</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#types</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#functions</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#misc</string>
        </dict>
      </array>
    </dict>
    <dict>
      <key>begin</key>
      <string>(?i:^\s*(create)\s+(aggregate|collation|conversion|database|domain|event trigger|group|(?:unique\s+)?index|language|operator class|operator|rule|schema|sequence|(?:global\s+|local\s+)?(?:temp\s+|temporary\s+|unlogged\s+)?table|tablespace|trigger|type|user|(?:materialized\s+)?view)\s+)(if\s+not\s+exists\s+)?((?:(?:[\w]+|".+")\.)?(?:[\w]+|".+"))</string>
      <key>beginCaptures</key>
      <dict>
        <key>1</key>
        <dict>
          <key>name</key>
          <string>keyword.other.create.pgsql</string>
        </dict>
        <key>2</key>
        <dict>
          <key>name</key>
          <string>keyword.other.pgsql</string>
        </dict>
        <key>3</key>
        <dict>
          <key>name</key>
          <string>keyword.other.pgsql</string>
        </dict>
        <key>4</key>
        <dict>
          <key>name</key>
          <string>entity.name.function.pgsql</string>
        </dict>
      </dict>
      <key>end</key>
      <string>;\s*</string>
      <key>name</key>
      <string>meta.statement.pgsql.create</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>include</key>
          <string>#dollar_quotes</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#comments</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#strings</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#keywords</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#types</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#functions</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#misc</string>
        </dict>
      </array>
    </dict>
    <dict>
      <key>begin</key>
      <string>(^\s*[a-zA-Z]+)</string>
      <key>beginCaptures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>keyword.other.pgsql</string>
        </dict>
      </dict>
      <key>comment</key>
      <string>Last update (including keywords below) using postgres 9.3. See classes/Help.php for update method. Testing change below to just assume starting word is a SQL keyword.</string>
      <key>end</key>
      <string>;\s*</string>
      <key>name</key>
      <string>meta.statement.pgsql</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>include</key>
          <string>#dollar_quotes</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#comments</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#strings</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#keywords</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#types</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#functions</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#misc</string>
        </dict>
      </array>
    </dict>
    <dict>
      <key>begin</key>
      <string>^(\\[\S]+)</string>
      <key>beginCaptures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>meta.preprocessor.pgsql</string>
        </dict>
      </dict>
      <key>comment</key>
      <string>psql directives</string>
      <key>end</key>
      <string>\n</string>
      <key>name</key>
      <string>meta.statement.pgsql.psql</string>
    </dict>
  </array>
  <key>repository</key>
  <dict>
    <key>comments</key>
    <dict>
      <key>patterns</key>
      <array>
        <dict>
          <key>captures</key>
          <dict>
            <key>1</key>
            <dict>
              <key>name</key>
              <string>punctuation.definition.comment.pgsql</string>
            </dict>
          </dict>
          <key>match</key>
          <string>(--).*$\n?</string>
          <key>name</key>
          <string>comment.line.double-dash.pgsql</string>
        </dict>
        <dict>
          <key>begin</key>
          <string>/\*</string>
          <key>captures</key>
          <dict>
            <key>0</key>
            <dict>
              <key>name</key>
              <string>punctuation.definition.comment.pgsql</string>
            </dict>
          </dict>
          <key>end</key>
          <string>\*/</string>
          <key>name</key>
          <string>comment.block.c</string>
        </dict>
      </array>
    </dict>
    <key>dollar_quotes</key>
    <dict>
      <key>patterns</key>
      <array>
        <dict>
          <key>begin</key>
          <string>(\$[\w_0-9]*\$)$</string>
          <key>comment</key>
          <string>Assume multiline dollar quote is SQL; start if quote is at the end of the line.
                    This could easily support other PL languages like PHP and Ruby -- see PHP heredoc as an example.</string>
          <key>end</key>
          <string>\1</string>
          <key>name</key>
          <string>meta.dollar-quote.pgsql</string>
          <key>patterns</key>
          <array>
            <dict>
              <key>include</key>
              <string>#dollar_quotes</string>
            </dict>
            <dict>
              <key>include</key>
              <string>#comments</string>
            </dict>
            <dict>
              <key>include</key>
              <string>#strings</string>
            </dict>
            <dict>
              <key>include</key>
              <string>#keywords</string>
            </dict>
            <dict>
              <key>include</key>
              <string>#types</string>
            </dict>
            <dict>
              <key>include</key>
              <string>#functions</string>
            </dict>
            <dict>
              <key>include</key>
              <string>#misc</string>
            </dict>
          </array>
        </dict>
      </array>
    </dict>
    <key>keywords</key>
    <dict>
      <key>patterns</key>
      <array>
        <dict>
          <key>captures</key>
          <dict>
            <key>1</key>
            <dict>
              <key>name</key>
              <string>keyword.other.pgsql</string>
            </dict>
          </dict>
          <key>match</key>
          <string>(?xi)\b(abort|absolute|access|action|add|admin|after|aggregate|all|also|alter|always|analyse|analyze|and|any|as|asc|assertion|assignment|asymmetric|at|attribute|authorization|backward|before|begin|between|both|by|cache|called|cascade|cascaded|case|cast|catalog|chain|characteristics|check|checkpoint|class|close|cluster|collate|collation|column|comment|comments|commit|committed|concurrently|configuration|connection|constraint|constraints|content|continue|conversion|copy|cost|create|cross|csv|cursor|cycle|data|database|deallocate|debug|declare|default|defaults|deferrable|deferred|definer|delete|delimiter|delimiters|desc|dictionary|disable|discard|distinct|do|document|domain|drop|each|else|enable|encoding|encrypted|end|enum|escape|event|except|exception|exclude|excluding|exclusive|execute|exists|explain|extension|external|extract|family|fetch|first|following|for|force|foreign|forward|freeze|from|full|function|functions|global|grant|granted|greatest|group|handler|having|header|hold|identity|if|ilike|immediate|immutable|implicit|in|including|increment|index|indexes|info|inherit|inherits|initially|inline|inner|inout|input|insensitive|insert|instead|intersect|into|invoker|is|isnull|isolation|join|key|label|language|large|last|lateral|lc_collate|lc_ctype|leading|leakproof|least|left|level|like|limit|listen|load|location|lock|mapping|match|materialized|maxvalue|minvalue|mode|month|move|national|natural|next|no|none|not|nothing|notice|notify|notnull|nowait|nulls|object|of|off|offset|oids|on|only|operator|option|options|or|order|out|outer|over|overlaps|overlay|owned|owner|parallel|parser|partial|partition|passing|password|perform|placing|plans|position|preceding|prepare|prepared|preserve|primary|prior|privileges|procedural|procedure|program|query|quote|raise|range|read|reassign|recheck|recursive|ref|references|refresh|reindex|relative|release|rename|repeatable|replace|replica|reset|restart|restrict|return|returning|returns|revoke|right|role|rollback|row|rows|rule|safe|savepoint|schema|scroll|search|second|security|select|sequence|sequences|serializable|server|session|session_user|set|setof|share|show|similar|simple|snapshot|some|stable|standalone|start|statement|statistics|stdin|stdout|storage|strict|substring|symmetric|sysid|system|table|tables|tablespace|temp|template|temporary|then|to|trailing|transaction|treat|trigger|truncate|trusted|type|types|uncommitted|unencrypted|union|unique|unknown|unlisten|unlogged|until|update|user|using|vacuum|valid|validate|validator|value|values|variadic|verbose|version|view|volatile|warning|when|where|whitespace|window|with|work|wrapper|write|yes)\b</string>
        </dict>
      </array>
    </dict>
    <key>types</key>
    <dict>
      <key>patterns</key>
      <array>
        <dict>
          <key>captures</key>
          <dict>
            <key>1</key>
            <dict>
              <key>name</key>
              <string>support.type</string>
            </dict>
          </dict>
          <key>match</key>
          <string>(?xi)\b(array|bigint|bigserial|binary|bit|boolean|box|bytea|char|character|cidr|circle|date|day|dec|decimal|double|false|float|inet|int|integer|interval|json|jsonb|line|lseg|macaddr|minute|money|nchar|null|numeric|path|point|polygon|precision|real|serial|smallint|smallserial|text|time|timestamp|timestamptz|true|tsquery|tsvector|txid_snapshot|uuid|varchar|varying|varying|without|xml|year|zone)\b</string>
        </dict>
      </array>
    </dict>
    <key>functions</key>
    <dict>
      <key>patterns</key>
      <array>
        <dict>
          <key>captures</key>
          <dict>
            <key>1</key>
            <dict>
              <key>name</key>
              <string>support.function</string>
            </dict>
          </dict>
          <key>match</key>
          <string>(?xi)\b(coalesce|current|current_catalog|current_date|current_role|current_schema|current_user|nullif|strip|trim|xmlattributes|xmlconcat|xmlelement|xmlexists|xmlforest|xmlparse|xmlpi|xmlroot|xmlserialize)\b</string>
        </dict>
      </array>
    </dict>
    <key>misc</key>
    <dict>
      <key>patterns</key>
      <array>
        <dict>
          <key>match</key>
          <string>\b\d+\b</string>
          <key>name</key>
          <string>constant.numeric.pgsql</string>
        </dict>
        <dict>
          <key>match</key>
          <string>\*</string>
          <key>name</key>
          <string>keyword.operator.star.pgsql</string>
        </dict>
        <dict>
          <key>match</key>
          <string>[!&lt;&gt;]?=|&lt;&gt;|&lt;|&gt;</string>
          <key>name</key>
          <string>keyword.operator.comparison.pgsql</string>
        </dict>
        <dict>
          <key>match</key>
          <string>-|\+|/</string>
          <key>name</key>
          <string>keyword.operator.math.pgsql</string>
        </dict>
        <dict>
          <key>match</key>
          <string>\|\|</string>
          <key>name</key>
          <string>keyword.operator.concatenator.pgsql</string>
        </dict>
      </array>
    </dict>
    <key>string_escape</key>
    <dict>
      <key>match</key>
      <string>\\.</string>
      <key>name</key>
      <string>constant.character.escape.pgsql</string>
    </dict>
    <key>strings</key>
    <dict>
      <key>patterns</key>
      <array>
        <dict>
          <key>captures</key>
          <dict>
            <key>1</key>
            <dict>
              <key>name</key>
              <string>punctuation.definition.string.begin.pgsql</string>
            </dict>
            <key>3</key>
            <dict>
              <key>name</key>
              <string>punctuation.definition.string.end.pgsql</string>
            </dict>
          </dict>
          <key>comment</key>
          <string>This is faster than the next begin/end rule since sub-pattern will match till end-of-line and SQL files tend to have very long lines.</string>
          <key>match</key>
          <string>(')[^'\\]*(')</string>
          <key>name</key>
          <string>string.quoted.single.pgsql</string>
        </dict>
        <dict>
          <key>begin</key>
          <string>'</string>
          <key>beginCaptures</key>
          <dict>
            <key>0</key>
            <dict>
              <key>name</key>
              <string>punctuation.definition.string.begin.pgsql</string>
            </dict>
          </dict>
          <key>comment</key>
          <string>Need to implement escape rule with two single quotes in a row. Lots of other escaping issues with single quotes.</string>
          <key>end</key>
          <string>'</string>
          <key>endCaptures</key>
          <dict>
            <key>0</key>
            <dict>
              <key>name</key>
              <string>punctuation.definition.string.end.pgsql</string>
            </dict>
          </dict>
          <key>name</key>
          <string>string.quoted.single.pgsql</string>
          <key>patterns</key>
          <array>
            <dict>
              <key>include</key>
              <string>#string_escape</string>
            </dict>
          </array>
        </dict>
        <dict>
          <key>comment</key>
          <string>Double quoting treated like strings, but they are really identifiers.</string>
          <key>match</key>
          <string>(")[^"#]*(")</string>
          <key>name</key>
          <string>variable.other.pgsql</string>
        </dict>
        <dict>
          <key>begin</key>
          <string>(\$[\w_0-9]*\$)</string>
          <key>comment</key>
          <string>Color as a string if dollar quote did not start at the end of a line.</string>
          <key>end</key>
          <string>\1</string>
          <key>name</key>
          <string>string.unquoted.dollar.pgsql</string>
        </dict>
      </array>
    </dict>
  </dict>
  <key>scopeName</key>
  <string>source.pgsql</string>
  <key>uuid</key>
  <string>4D6B679D-111C-4529-B558-3F25487D9E27</string>
</dict>
</plist>
